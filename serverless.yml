service: myserverlessproject3

frameworkVersion: "3"

provider:
    name: aws
    runtime: nodejs18.x
    stage: dev
    profile: dev
    region: us-east-1
    environment:
        tableName: ${self:custom.tableName}
        bucketName: ${self:custom.bucketName}
    iam:
        role:
            statements:
              - Effect: Allow
                Action:
                    - dynamodb:*
                    - s3:*
                    - ses:*
                Resource: '*'

plugins:
    - serverless-webpack
    - serverless-dynamodb
    - serverless-offline


package:
    individually: true

custom:
    tableName: player-points-table
    bucketName: myserverlessprojectuploadbucket-12312356
    defaultStage: dev
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules: true
    dynamodb:
        stages:
            - dev
        start:
            port: 8000
            inMemory: true
            migrate: true
        migration:
            dir: db/migrations

functions:
    getPlayerScore:
        handler: lambdas/endpoints/getPlayerScore.handler
        events:
            - http:
                  path: get-player-score/{ID}
                  method: GET
                  cors: true
    createPlayerScore:
        handler: lambdas/endpoints/createPlayerScore.handler
        events:
            - http:
                  path: create-player-score/{ID}
                  method: POST
                  cors: true

    createFile:
        handler: lambdas/endpoints/createFile.handler
        events:
            - http:
                  path: create-file/{fileName}
                  method: POST
                  cors: true
    getFile:
        handler: lambdas/endpoints/getFile.handler
        events:
            - http:
                  path: get-file/{fileName}
                  method: GET
                  cors: true

    sendEmail:
        handler: lambdas/endpoints/sendEmail.handler
        events:
            - http:
                  path: send-email
                  method: POST
                  cors: true

resources:
    Resources:
        DemoBucketUpload:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.bucketName}
        MyDynamoDbTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName}
                AttributeDefinitions:
                    - AttributeName: ID
                      AttributeType: S
                KeySchema:
                    - AttributeName: ID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
